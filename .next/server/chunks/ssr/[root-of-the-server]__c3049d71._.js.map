{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/categorize-icons.ts"],"sourcesContent":["// 'use server';\n/**\n * @fileOverview An AI agent to categorize Free Fire item icons.\n *\n * - categorizeIcons - A function that categorizes Free Fire item icons.\n * - CategorizeIconsInput - The input type for the categorizeIcons function.\n * - CategorizeIconsOutput - The return type for the categorizeIcons function.\n */\n\n'use server';\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CategorizeIconsInputSchema = z.array(\n  z.object({\n    itemID: z.string().describe('The item ID of the Free Fire item.'),\n    description: z.string().describe('The description of the Free Fire item.'),\n    description2: z.string().describe('The secondary description of the Free Fire item.'),\n    icon: z.string().describe('The icon name of the Free Fire item.'),\n  })\n).describe('An array of Free Fire item objects.');\n\nexport type CategorizeIconsInput = z.infer<typeof CategorizeIconsInputSchema>;\n\nconst CategorizeIconsOutputSchema = z.array(\n  z.object({\n    itemID: z.string().describe('The item ID of the Free Fire item.'),\n    category: z.string().describe('The category of the Free Fire item (e.g., weapon, accessory, consumable).'),\n  })\n).describe('An array of Free Fire item IDs with their assigned categories.');\n\nexport type CategorizeIconsOutput = z.infer<typeof CategorizeIconsOutputSchema>;\n\nexport async function categorizeIcons(input: CategorizeIconsInput): Promise<CategorizeIconsOutput> {\n  return categorizeIconsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'categorizeIconsPrompt',\n  input: {schema: CategorizeIconsInputSchema},\n  output: {schema: CategorizeIconsOutputSchema},\n  prompt: `You are an expert in categorizing items from the game Free Fire.\n\n  Given the following list of Free Fire items, categorize each item into one of the following categories: Weapon, Accessory, Consumable, or Other.\n  Return a JSON array where each object contains the itemID and the determined category for that item.\n\n  Items:\n  {{#each this}}\n  - ItemID: {{itemID}}, Description: {{description}}, Description2: {{description2}}, Icon: {{icon}}\n  {{/each}}`,\n});\n\nconst categorizeIconsFlow = ai.defineFlow(\n  {\n    name: 'categorizeIconsFlow',\n    inputSchema: CategorizeIconsInputSchema,\n    outputSchema: CategorizeIconsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,gBAAgB;AAChB;;;;;;CAMC;;;;;AAID;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,KAAK,CACxC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACP,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B,IACA,QAAQ,CAAC;AAIX,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,KAAK,CACzC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACP,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC,IACA,QAAQ,CAAC;AAIJ,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;WAQA,CAAC;AACZ;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 306, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { cache } from 'react';\nimport { categorizeIcons } from '@/ai/flows/categorize-icons';\nimport type { FreeFireItem, ItemWithCategory } from '@/lib/types';\n\nconst URLS = [\n  'https://raw.githubusercontent.com/iamaanahmad/FreeFireItems/refs/heads/main/FFiconDataOB47.json',\n  'https://raw.githubusercontent.com/iamaanahmad/FreeFireItems/refs/heads/main/FFiconData46.json',\n  'https://raw.githubusercontent.com/iamaanahmad/FreeFireItems/refs/heads/main/IconData.json',\n];\n\nexport const getInitialData = cache(async (): Promise<{ items: ItemWithCategory[], categories: string[] }> => {\n  try {\n    const responses = await Promise.all(URLS.map(url => fetch(url, { cache: 'no-store' })));\n    const allJson = await Promise.all(responses.map(res => {\n      if (!res.ok) {\n        console.error(`Failed to fetch ${res.url}: ${res.statusText}`);\n        return [];\n      }\n      return res.json();\n    }));\n\n    const allItems: FreeFireItem[] = allJson.flat();\n    const uniqueItemsMap = new Map<string, FreeFireItem>();\n    allItems.forEach(item => {\n      if (item && item.itemID) {\n        uniqueItemsMap.set(item.itemID, item);\n      }\n    });\n    const uniqueItems = Array.from(uniqueItemsMap.values());\n\n    const itemsToCategorize = uniqueItems.map(({ itemID, description, description2, icon }) => ({\n      itemID,\n      description: description || '',\n      description2: description2 || '',\n      icon: icon || '',\n    }));\n\n    // Categorize items in batches to avoid exceeding context window limits\n    const BATCH_SIZE = 100;\n    const batches = [];\n    for (let i = 0; i < itemsToCategorize.length; i += BATCH_SIZE) {\n        batches.push(itemsToCategorize.slice(i, i + BATCH_SIZE));\n    }\n\n    // Process batches sequentially with a delay to respect API rate limits (15 requests/minute)\n    const categorizedData = [];\n    for (const batch of batches) {\n        const result = await categorizeIcons(batch);\n        if (result) {\n            categorizedData.push(...result);\n        }\n        // Wait for 5 seconds to stay under the 15 requests/minute limit\n        await new Promise(resolve => setTimeout(resolve, 5000));\n    }\n\n    const categoryMap = new Map(categorizedData.map(c => [c.itemID, c.category]));\n    \n    const itemsWithCategory: ItemWithCategory[] = uniqueItems.map(item => ({\n      ...item,\n      category: categoryMap.get(item.itemID) || 'Other',\n    }));\n\n    const allCategories = [...new Set(itemsWithCategory.map(item => item.category))];\n\n    return { items: itemsWithCategory, categories: allCategories.sort() };\n  } catch (error) {\n    console.error(\"Error fetching or processing initial data:\", error);\n    return { items: [], categories: [] };\n  }\n});"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAGA,MAAM,OAAO;IACX;IACA;IACA;CACD;AAEM,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE;IAClC,IAAI;QACF,MAAM,YAAY,MAAM,QAAQ,GAAG,CAAC,KAAK,GAAG,CAAC,CAAA,MAAO,MAAM,KAAK;gBAAE,OAAO;YAAW;QACnF,MAAM,UAAU,MAAM,QAAQ,GAAG,CAAC,UAAU,GAAG,CAAC,CAAA;YAC9C,IAAI,CAAC,IAAI,EAAE,EAAE;gBACX,QAAQ,KAAK,CAAC,CAAC,gBAAgB,EAAE,IAAI,GAAG,CAAC,EAAE,EAAE,IAAI,UAAU,EAAE;gBAC7D,OAAO,EAAE;YACX;YACA,OAAO,IAAI,IAAI;QACjB;QAEA,MAAM,WAA2B,QAAQ,IAAI;QAC7C,MAAM,iBAAiB,IAAI;QAC3B,SAAS,OAAO,CAAC,CAAA;YACf,IAAI,QAAQ,KAAK,MAAM,EAAE;gBACvB,eAAe,GAAG,CAAC,KAAK,MAAM,EAAE;YAClC;QACF;QACA,MAAM,cAAc,MAAM,IAAI,CAAC,eAAe,MAAM;QAEpD,MAAM,oBAAoB,YAAY,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,IAAI,EAAE,GAAK,CAAC;gBAC1F;gBACA,aAAa,eAAe;gBAC5B,cAAc,gBAAgB;gBAC9B,MAAM,QAAQ;YAChB,CAAC;QAED,uEAAuE;QACvE,MAAM,aAAa;QACnB,MAAM,UAAU,EAAE;QAClB,IAAK,IAAI,IAAI,GAAG,IAAI,kBAAkB,MAAM,EAAE,KAAK,WAAY;YAC3D,QAAQ,IAAI,CAAC,kBAAkB,KAAK,CAAC,GAAG,IAAI;QAChD;QAEA,4FAA4F;QAC5F,MAAM,kBAAkB,EAAE;QAC1B,KAAK,MAAM,SAAS,QAAS;YACzB,MAAM,SAAS,MAAM,CAAA,GAAA,yIAAA,CAAA,kBAAe,AAAD,EAAE;YACrC,IAAI,QAAQ;gBACR,gBAAgB,IAAI,IAAI;YAC5B;YACA,gEAAgE;YAChE,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;QACrD;QAEA,MAAM,cAAc,IAAI,IAAI,gBAAgB,GAAG,CAAC,CAAA,IAAK;gBAAC,EAAE,MAAM;gBAAE,EAAE,QAAQ;aAAC;QAE3E,MAAM,oBAAwC,YAAY,GAAG,CAAC,CAAA,OAAQ,CAAC;gBACrE,GAAG,IAAI;gBACP,UAAU,YAAY,GAAG,CAAC,KAAK,MAAM,KAAK;YAC5C,CAAC;QAED,MAAM,gBAAgB;eAAI,IAAI,IAAI,kBAAkB,GAAG,CAAC,CAAA,OAAQ,KAAK,QAAQ;SAAG;QAEhF,OAAO;YAAE,OAAO;YAAmB,YAAY,cAAc,IAAI;QAAG;IACtE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8CAA8C;QAC5D,OAAO;YAAE,OAAO,EAAE;YAAE,YAAY,EAAE;QAAC;IACrC;AACF;;;IA3Da;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getInitialData as '7fb1c9bc4c22408faaf40a83cc2629f2d4ebbfb5d8'} from 'ACTIONS_MODULE0'\nexport {categorizeIcons as '402bf43ce26717c7b160ebe5677fa4e9464429020f'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/arsenal/arsenal-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ArsenalClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call ArsenalClient() from the server but ArsenalClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/arsenal/arsenal-client.tsx <module evaluation>\",\n    \"ArsenalClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,2EACA","debugId":null}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/arsenal/arsenal-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ArsenalClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call ArsenalClient() from the server but ArsenalClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/arsenal/arsenal-client.tsx\",\n    \"ArsenalClient\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,uDACA","debugId":null}},
    {"offset": {"line": 485, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 495, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import { getInitialData } from '@/app/actions';\nimport { ArsenalClient } from '@/components/arsenal/arsenal-client';\n\nexport default async function Home() {\n  const { items, categories } = await getInitialData();\n\n  return (\n    <main className=\"min-h-screen bg-background text-foreground\">\n      <ArsenalClient initialItems={items} allCategories={categories} />\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,eAAe;IAC5B,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,GAAG,MAAM,CAAA,GAAA,qHAAA,CAAA,iBAAc,AAAD;IAEjD,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC,kJAAA,CAAA,gBAAa;YAAC,cAAc;YAAO,eAAe;;;;;;;;;;;AAGzD","debugId":null}}]
}